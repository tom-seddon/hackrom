;-------------------------------------------------------------------------
;
; Thunks copied over the stack.
; 
relocstart:
                .logical $100
mem_access_thunk: .proc
go:
                jmp *&$ff00
thunk_lsb = *-2

rdposx:
                sta $fe30
                lda (poslo),Y
                
finish:
                ldx $f4
                stx $fe30
                ldx #$ff
original_x = *-1
                plp
                rts

rdtmpposx:
                sta $fe30
                lda (tmpposlo),Y
                jmp finish

wrposx: .proc
                sta $fe30
                lda #$ff
value = * -1
                sta (poslo),Y
                jmp finish
                .pend

tube_mask:
                .byte 0
end:
                .pend
                .here
relocend:

                .cerror (>mem_access_thunk)!=(>mem_access_thunk.end),"mem access thunk mustn't straddle a page boundary"
                
;-------------------------------------------------------------------------
; 
; Read a byte from memory. Takes a byte from memory location
; pos(lo/hi)% + Y register and returns value in A reg. X and Y
; registers are preserved
; 
;-------------------------------------------------------------------------

rdposx: .proc
                lda #<mem_access_thunk.rdposx
                jsr call_mem_access_thunk
                bcs tube
                rts

tube:
                ldx #poslo
                jmp read_tube
                .pend

rdtmpposx: .proc
                lda #<mem_access_thunk.rdtmpposx
                jsr call_mem_access_thunk
                bcs tube
                rts

tube:
                ldx #tmpposlo
                .cerror *!=read_tube,"oops"
                .pend

read_tube: .proc
                tya
                pha

                clc
                tya
                adc 0,x
                pha

                lda 1,x
                adc #0
                tay

                pla
                tax

                jsr read_parasite

                tax

                pla
                tay

                txa
                ldx mem_access_thunk.original_x
                rts
                .pend

;-------------------------------------------------------------------------
;
; Opposite of rdposx% - We write a byte to poslo%+Y
;
;-------------------------------------------------------------------------

wrposx: .proc
                sta mem_access_thunk.wrposx.value
                lda #<mem_access_thunk.wrposx
                jsr call_mem_access_thunk
                bcc done
                
tube:
                tya
                pha

                clc
                tya
                adc poslo+0
                tax

                lda poslo+1
                adc #0
                tay

                lda mem_access_thunk.wrposx.value
                jsr write_parasite

                pla
                tay

                ldx mem_access_thunk.original_x
                lda mem_access_thunk.wrposx.value

done:
                rts
                .pend


;-------------------------------------------------------------------------
;
; Call mem access thunk to read memory if possible.
;
; Entry: A = LSB of memory access routine inside relocated thunk
; Exit:  C=0 if routine was called
;        C=1 if Tube access is required
;        X/Y preserved
call_mem_access_thunk: .proc
                sta mem_access_thunk.thunk_lsb
                stx mem_access_thunk.original_x

                lda romid
                bit mem_access_thunk.tube_mask
                bne tube

                and #romid_rom_mask

                clc
                php
                sei
                jmp mem_access_thunk

tube:
                sec
                rts
                .pend

;-------------------------------------------------------------------------
;
; Call this to get the 48 cycle Tube read delay.
;
tube_read_delay: .proc
                ; +6 here.
                jsr done        ;+12 = 18
                jsr done        ;+12 = 30
                jsr done        ;+12 = 42
done:
                rts             ;+6 = 48
                .pend
                
;-------------------------------------------------------------------------
;
; Claim Tube.
; 
claim_tube: .proc
                lda #$c0+TUBE_CLAIM_ID
                jsr $406
                bcc claim_tube
                rts                
                .pend
                
;-------------------------------------------------------------------------
;
; Release Tube.
; 
release_tube: .proc
                lda #$80+TUBE_CLAIM_ID
                jmp $406
                .pend
                
;---------------------------------
; Relocates the read and write
; routines over the stack so that
; we can read/write to other ROMs
;---------------------------------
reloc: .proc
                LDX	#relocend-relocstart
copyrdwr:
                LDA	relocstart,X
                STA	$100,X
                DEX
                BPL	copyrdwr

                ; Check Tube presence and set up Tube mask. When no
                ; Tube, the Tube mask is 0, so the Tube parasite RAM
                ; bit is ignored.
                jsr get_tube_flag
                and #romid_tube_mask
                sta mem_access_thunk.tube_mask
                
                RTS
                .pend

;-------------------------------------------------------------------------
;
; Get flag in A indicating tube presence.
;
; Exit: A=$ff if tube present, $00 if not, and Z set accordingly
;       X/Y preserved

get_tube_flag: .proc
                txa
                pha
                tya
                pha

                lda #234
                jsr osbyte_x0_y255
                cpx #$ff        ;C set if Tube present

                pla
                tay
                pla
                tax

                lda #0
                sbc #0
                eor #$ff
                
                rts
                .pend

;-------------------------------------------------------------------------
; 
; Read byte from parasite memory.
;
; Entry: YX = address
;
; Exit:  A = value read

read_parasite: .proc
                ; avoid Tube I/O
                cpy #$fe
                bne good_address
                cpx #$f8
                bcc good_address
bad_address:
                lda #$ff
                rts

good_address:
                lda #0
                pha
                pha
                tya
                pha
                txa
                pha

                jsr claim_tube

                tsx
                inx
                ldy #1
                lda #0          ;multi byte, parasite->host
                jsr $406

                jsr tube_read_delay

                lda $fee5
                pha

                jsr release_tube
                
                pla

                tsx
                inx
                inx
                inx
                inx
                txs
                
                rts
                .pend

;-------------------------------------------------------------------------
;
; Write byte to parasite memory.
;
; Entry: YX = address
;        A = byte to write

write_parasite: .proc
                ; avoid Tube I/O
                cpy #$fe
                bne good_address
                cpx #$f8
                bcs done
                
good_address:
                pha             ;save byte to write

                lda #0
                pha
                pha
                tya
                pha
                txa
                pha

                jsr claim_tube
                
                tsx
                inx
                ldy #1
                lda #1          ;multi byte, host->parasite
                jsr $406

                ; discard address
                tsx
                inx
                inx
                inx
                inx
                txs

                pla             ;get byte to write
                sta $fee5

                jsr release_tube

done:
                rts
                .pend
                
                
                
;-------------------------------------------------------------------------
;
; Check if the current language is BASIC.
;
; Exit: C=0 if BASIC, C=1 if not
;       A/X/Y preserved
is_BASIC: .proc
                pha
                txa
                pha
                tya
                pha

                lda tmp
                pha

                lda #187        ;read BASIC ROM slot
                jsr osbyte_x0_y255
                stx tmp

                lda #252        ;read current language ROM
                jsr osbyte_x0_y255
                cpx tmp

                clc
                beq +
                sec
+

                pla
                sta tmp               

                pla
                tay
                pla
                tax
                pla
                rts
                .pend
                
;-------------------------------------------------------------------------
;
; Read byte from BASIC's zero page workspace.
;
; Entry: X = address of byte to read
;
; Exit: zero page byte in A
;
;       C=1 if BASIC is not the current language

read_BASIC_zp: .proc
zp_addr = tmp
basic_slot = tmp2
                jsr is_BASIC
                php
                
is_basic:
                jsr get_tube_flag
                bne read_parasite

read_host:
                lda 0,x
                plp
                rts

read_parasite:
                ldy #0
                jsr read_parasite
                plp
                rts

                .pend

;-------------------------------------------------------------------------
;
; Get default romid.
;
; Exit: A = $40 if Tube active, or contents of $f4 if not
;       X/Y preserved

get_default_romid: .proc
                jsr get_tube_flag
                bne tube
                lda $f4
                rts
tube:
                lda #romid_tube_mask
                rts
                .pend
                
;-------------------------------------------------------------------------
;
; Get useful PAGE MSB.
;
; Do various bits and bobs to try to get a useful value...
;
; Exit: A = PAGE MSB
;       X/Y preserved

get_PAGE_MSB: .proc
                jsr get_tube_flag
                jsr is_BASIC

                bcc basic

not_basic:
                cmp #0
                bne parasite_not_basic

host_not_basic:
                ; just get OSHWM
                pha
                txa
                pha
                tya
                pha

                lda #131
                jsr osbyte

                tsx             ;+1=y +2=x +3=a
                tya
                sta $103,x

                pla
                tay
                pla
                tax
                pla

                rts

parasite_not_basic:
                ; just get OSHWM
                lda #$08
                rts

basic:
                cmp #0
                bne parasite_basic
                
host_basic:
                lda $18
                rts

parasite_basic:
                pha
                txa
                pha
                tya
                pha

                ldy #$00
                ldx #$18
                jsr read_parasite

                tsx             ;+1=y +2=x +3=a
                sta $103,x

                pla
                tay
                pla
                tax
                pla

                rts
                
                .pend
